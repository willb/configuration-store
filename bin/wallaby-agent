#!/usr/bin/ruby

# wallaby-agent:  the wallaby store
#
# Copyright (c) 2009--2010 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'spqr/spqr'
require 'spqr/app'

require 'mrg/grid/config'

require 'logger'
require 'syslog'

def daemonify
  pid = nil
  sid = nil
  
  return if Process.ppid == 1
  
  pid = fork
  
  if pid != nil
    if pid < 0
      Syslog.open {|s| s.fatal "can't fork child process"}
      exit(1)
    end
    exit(0)
  end
  
  sid = Process.setsid
  if sid < 0
    Syslog.open {|s| s.fatal "can't set self as session group leader"}
    exit(1)
  end
  
  exit(1) if Dir.chdir("/") < 0

  # close open FDs
  $stdin.reopen("/dev/null", "r")
  $stdout.reopen("/dev/null", "w")
  $stderr.reopen("/dev/null", "w")
end

USE_PREPARED_STATEMENTS = ENV['WALLABY_USE_PREPARED_STATEMENTS'] && (ENV['WALLABY_USE_PREPARED_STATEMENTS'] == "1")

dbname = ENV['WALLABY_CONFIGDB_NAME'] || ":memory:"
snapdb = ENV['WALLABY_SNAPDB_NAME'] || ":memory:"
host = ENV['WALLABY_BROKER_HOST'] || "localhost"
port = (ENV['WALLABY_BROKER_PORT'] || 5672).to_i
username = ENV['WALLABY_BROKER_USER']
password = ENV['WALLABY_BROKER_PASSWORD']
logfile = ENV['WALLABY_LOGFILE']
debug = (ENV['WALLABY_LOGLEVEL'] && Logger.const_get(ENV['WALLABY_LOGLEVEL'].upcase)) || Logger::WARN
do_daemonify = !ENV['WALLABY_FOREGROUND']
logoptions = nil

op = OptionParser.new do |opts|
  opts.banner = "Usage wallaby-agent [options]"
  
  opts.on("-l", "--logfile FILE", "file for wallaby-agent log") do |file|
    logfile = file
  end
  
  opts.on("-d", "--dbname FILE", "file for persistent storage (will be created if it doesn't exist)") do |db| 
    dbname = db
  end
  
  opts.on("-s", "--snapdb FILE", "file for store snapshots (will be created if it doesn't exist)") do |db|
    snapdb = db
  end
  
  opts.on("-h", "--help", "shows this message") do
    raise OptionParser::InvalidOption
  end

  opts.on("-H", "--host HOSTNAME", "qpid broker host (default localhost)") do |h|
    host = h
  end
  
  opts.on("-p", "--port NUM", "qpid broker port (default 5672)") do |num|
    port = num.to_i
  end
  
  opts.on("-U", "--user NAME", "qpid username") do |name|
    username = name
  end
  
  opts.on("-P", "--password PASS", "qpid password") do |pass|
    password = pass
  end
  
  opts.on("-v", "--verbose", "output verbose debugging info" "  (repeat for more verbosity)") do
    debug = debug - 1 if debug > 0
  end

  opts.on("-f", "--foreground", "run in the foreground") do
    do_daemonify = false
  end
end

begin
  op.parse!
rescue OptionParser::InvalidOption
  puts op
  exit
end

daemonify if do_daemonify

Syslog.open do |s| 
  s.notice "storing configuration to #{dbname}"
  s.notice "storing snapshots to #{snapdb}"
  puts "storing results to #{dbname}"
  puts "storing snapshots to #{snapdb}"
end

DO_CREATE = (dbname == ":memory:" or not File.exist?(dbname))
DO_SNAPCREATE = (snapdb == ":memory:" or not File.exist?(snapdb))

Rhubarb::Persistence::open(dbname,:default,USE_PREPARED_STATEMENTS)
Rhubarb::Persistence::open(snapdb,:snapshot,USE_PREPARED_STATEMENTS)

Mrg::Grid::Config::MAIN_DB_TABLES.each {|tab| tab.db = Rhubarb::Persistence::dbs[:default] }
Mrg::Grid::Config::SNAP_DB_TABLES.each {|tab| tab.db = Rhubarb::Persistence::dbs[:snapshot] }

if DO_CREATE
  classes = Mrg::Grid::Config::MAIN_DB_TABLES
  classes.each do |cl| 
    Syslog.open do |s| 
      s.notice "creating table for #{cl.name}..."
      puts "creating table for #{cl.name}..." unless do_daemonify
    end
    cl.create_table
  end
  Rhubarb::Persistence::db.execute("PRAGMA user_version = #{Mrg::Grid::Config::DBVERSION}")
  Mrg::Grid::Config::Store.find_by_id(0).storeinit
end

if DO_SNAPCREATE
  puts "creating snapshot tables"
  Mrg::Grid::Config::SNAP_DB_TABLES.each {|cl| cl.create_table(:snapshot)}
end

options = {}
options[:loglevel] = debug
options[:logfile] = logfile if logfile
options[:appname] = "Wallaby configuration agent"
options[:user] = username if username
options[:password] = password if password
options[:server] = host
options[:port] = port

app = SPQR::App.new(options)
app.register Mrg::Grid::Config::Store,Mrg::Grid::Config::Node,Mrg::Grid::Config::ConfigVersion,Mrg::Grid::Config::Feature,Mrg::Grid::Config::Group,Mrg::Grid::Config::Parameter,Mrg::Grid::Config::Subsystem,Mrg::Grid::Config::Snapshot,Mrg::Grid::Config::WallabyConfigEvent

app.main
