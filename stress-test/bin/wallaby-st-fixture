#!/usr/bin/env ruby

# wallaby-st-fixture:  stress test and test fixture utility for the wallaby store
# Copyright (c) 2009--2010 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'qmf'
require 'mrg/grid/config-client'
require 'mrg/grid/config-proxies'
require 'mrg/grid/config/misc/bogusdata'

begin
  require 'rubygems'
  require 'capricious'
rescue LoadError
  puts "wallaby-st-fixture requires rubygems and capricious"
end

host = ENV['WALLABY_BROKER_HOST'] || "localhost"
port = (ENV['WALLABY_BROKER_PORT'] || 5672).to_i
username = ENV['WALLABY_BROKER_USER']
password = ENV['WALLABY_BROKER_PASSWORD']
debug = :warn
activate = false
verbosity = nil

nodecount = 1000
paramcount = 500
featurecount = 50
groupcount = 50
subsystemcount = 10

groups_per_node = Capricious::Poisson.new(3)
features_per_group = Capricious::Poisson.new(3)
params_per_group = Capricious::Poisson.new(7)
params_per_feature = Capricious::Poisson.new(5)
features_per_idgroup = Capricious::Poisson.new(2)
params_per_idgroup = Capricious::Poisson.new(2)
default_features = Capricious::Poisson.new(1)
default_params = Capricious::Poisson.new(6)

# not configurable yet
features_per_feature = Capricious::Poisson.new(1)
params_per_subsys = Capricious::Poisson.new(12)

# not used yet
deps_per_feature = Capricious::Poisson.new(1)

op = OptionParser.new do |opts|
  opts.banner = "Usage wallaby-stresstest [options]"

  opts.on("-h", "--help", "shows this message") do
    raise OptionParser::InvalidOption
  end

  opts.on("-H", "--host HOSTNAME", "qpid broker host (default localhost)") do |h|
    host = h
  end

  opts.on("-p", "--port NUM", "qpid broker port (default 5672)") do |num|
    port = num.to_i
  end

  opts.on("-U", "--user NAME", "qpid username") do |name|
    username = name
  end

  opts.on("-P", "--password PASS", "qpid password") do |pass|
    password = pass
  end

  opts.on("-a", "--activate", "attempt to activate config after loading") do
    activate = true
  end
  
  {"nodecount"=>nodecount, "paramcount"=>paramcount, "featurecount"=>featurecount, "groupcount"=>groupcount, "subsystemcount"=>subsystemcount}.each do |paramname, count|
  
    opts.on("--#{paramname} COUNT", "number of #{paramname.sub("count", "s")} to create (default #{count})") do |ct|
      eval "#{paramname} = #{ct.to_i}"
    end
  end
  
  opts.on("--groups-per-node COUNT", "mean number of explicit groups that each node is a member of") do |ct|
    groups_per_node = Capricious::Poisson.new ct.to_i
  end

  opts.on("--features-per-group COUNT", "mean number of features installed on each explicit group") do |ct|
    features_per_group = Capricious::Poisson.new ct.to_i
  end
  
  opts.on("--params-per-group COUNT", "mean number of params installed on each explicit group") do |ct|
    params_per_group = Capricious::Poisson.new ct.to_i
  end
  
  opts.on("--params-per-feature COUNT", "mean number of params installed on each feature") do |ct|
    params_per_feature = Capricious::Poisson.new ct.to_i
  end
  
  opts.on("--features-per-idgroup COUNT", "mean number of features installed on each idgroup") do |ct|
    features_per_idgroup = Capricious::Poisson.new ct.to_i
  end

  opts.on("--params-per-idgroup COUNT", "mean number of params installed on each idgroup") do |ct|
    params_per_idgroup = Capricious::Poisson.new ct.to_i
  end
  
  opts.on("--default-feature-count COUNT", "mean number of features installed on the default group") do |ct|
    default_features = Capricious::Poisson.new ct.to_i
  end

  opts.on("--default-param-count COUNT", "mean number of params installed on the default group") do |ct|
    default_params = Capricious::Poisson.new ct.to_i
  end
  
end

begin
  op.parse!
rescue OptionParser::InvalidOption
  puts op
  exit
end

input = (ARGV.size > 0 ? open(ARGV[0]) : $stdin)

console = Qmf::Console.new

settings = Qmf::ConnectionSettings.new
settings.username = username if username
settings.password = password if password
settings.host = host
settings.port = port

connection = Qmf::Connection.new(settings)

broker = console.add_connection(connection)

broker.wait_for_stable

store = console.object(:class=>"Store")
store.storeinit("resetdb"=>"yes")

store_client = Mrg::Grid::ConfigClient::Store.new(store, console)

def make_names(count, collection, sep="-", suffix="", num=0)
  snum = format("%05x", num)
  if count < collection.size
    return collection.sort_by {rand}.slice(0, count).map{|name| "#{name}#{sep}#{snum}#{suffix}"}
  end
  
  coll = collection.sort_by{rand}.map{|name| "#{name}#{sep}#{snum}#{suffix}"}
  coll | make_names(count - coll.size, collection, sep, suffix, num + 1)
end

node_names = make_names(nodecount, Mrg::Grid::Config::Misc::BogusData::NODES, "-", ".local.")
param_names = make_names(paramcount, Mrg::Grid::Config::Misc::BogusData::PARAMETERS)
feature_names = make_names(featurecount, Mrg::Grid::Config::Misc::BogusData::FEATURES)
group_names = make_names(groupcount, Mrg::Grid::Config::Misc::BogusData::GROUPS, " ")
subsystem_names = make_names(subsystemcount, Mrg::Grid::Config::Misc::BogusData::SUBSYSTEMS)

# make entities

[[node_names, "node", :addNode], [param_names, "parameter", :addParam], [feature_names, "feature", :addFeature], [group_names, "group", :addExplicitGroup], [subsystem_names, "subsystem", :addSubsys]].each do |collection, kind, store_msg|
  collection.each do |name|
    puts "creating #{kind} #{name}"
    store_client.send(store_msg, name)
  end
end

# make relationships

node_names.each do |node_name|
  node = store_client.getNode(node_name)
  groups = group_names.sort_by{rand}.slice(0, groups_per_node.next.to_i)
  puts "setting groups for #{node_name} to #{groups.inspect}"
  node.modifyMemberships("ADD", groups, {})
end

features_to_include = feature_names.sort_by {rand}

while features_to_include.size > 0
  feature = store_client.getFeature(features_to_include.pop)
  puts "adding feature dependencies for #{feature.name}"
  ifcount = features_per_feature.next.to_i
  break if ifcount > features_to_include.size
  
  included_features = features_to_include.slice(0, features_per_feature.next.to_i)
  included_features.each do |fn|
    begin
      feature.modifyIncludedFeatures("ADD", [fn], {})
    rescue Object => ex
      puts "warning:  #{ex.inspect}"
    end
  end
end

def param_value(param, owner="")
  "#{param.downcase}_#{owner.downcase.sub(" ", "_")}"
end

{feature_names=>:getFeature, group_names=>:getExplicitGroup}.each do |collection, get_msg|
  collection.each do |th|
    thing = store_client.send(get_msg, th)
    puts "adding params for #{th}"
    paramcount = get_msg == :getFeature ? params_per_feature.next.to_i : params_per_group.next.to_i
    rands = []
    while rands.size < paramcount
      (paramcount - rands.size).times do
        rands |= [param_names[rand(param_names.size)]]
      end
    end
    
    thing.modifyParams("ADD", Hash[*rands.zip(rands.map{|r| param_value(r, th)}).flatten], {})
  end
end

subsystem_names.each do |sname|
  thing = store_client.getSubsys(sname)
  puts "adding params for subsystem #{sname}"
  
  paramcount = params_per_subsys.next.to_i
  
  rands = []
  
  while rands.size < paramcount
    (paramcount - rands.size).times do
      rands |= [param_names[rand(param_names.size)]]
    end
  end
end

if activate
  explain = store_client.activateConfig
  if explain != {}
    puts "Failed to activate configuration; please correct the following errors."
    explain.each do |node, node_explain|
      puts "#{node}:"
      node_explain.each do |reason, ls|
        puts "  #{reason}: #{ls.inspect}"
      end
    end
    exit(1)
  end
end
